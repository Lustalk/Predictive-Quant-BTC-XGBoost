name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_trading_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ make

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Format check with black
      run: |
        black --check src tests

    - name: Import sort check with isort
      run: |
        isort --check-only src tests

    - name: Type check with mypy
      run: |
        mypy src --ignore-missing-imports

    - name: Run tests with pytest
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: test_trading_db
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password
        REDIS_URL: redis://localhost:6379/0
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security linter
      run: |
        bandit -r src/

    - name: Check for known security vulnerabilities
      run: |
        safety check --json

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t btc-trading-strategy:latest .

    - name: Test Docker image
      run: |
        docker run --rm btc-trading-strategy:latest python -c "import src; print('Docker image works!')"

    - name: Run security scan on Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'btc-trading-strategy:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

  performance:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install memory-profiler py-spy

    - name: Memory usage test
      run: |
        python -c "
        import psutil
        import os
        process = psutil.Process(os.getpid())
        print(f'Initial memory: {process.memory_info().rss / 1024 / 1024:.2f} MB')
        
        import pandas as pd
        import numpy as np
        import xgboost as xgb
        import lightgbm as lgb
        
        final_memory = process.memory_info().rss / 1024 / 1024
        print(f'Final memory: {final_memory:.2f} MB')
        
        if final_memory > 1000:  # 1GB limit for basic imports
            exit(1)
        "

    - name: Basic performance benchmark
      run: |
        python -c "
        import time
        import pandas as pd
        import numpy as np
        
        # Test DataFrame operations
        start = time.time()
        df = pd.DataFrame(np.random.randn(100000, 20))
        df['sma_20'] = df[0].rolling(20).mean()
        duration = time.time() - start
        
        print(f'DataFrame operations took: {duration:.3f}s')
        
        if duration > 5.0:  # 5 second limit
            exit(1)
        "

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security, docker, performance]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging (placeholder)
      run: |
        echo "Would deploy to staging environment"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security, docker, performance]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production (placeholder)
      run: |
        echo "Would deploy to production environment"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"